// 3.quad.oop.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

/*Implement a class Quadratic that represents degree two polynomials
i.e., polynomials of type ax2 + bx + c.
The class will require three data members corresponding to a, b and c
Implement the following operations :
A constructor(including a default constructor which creates the 0 polynomial)
Overloaded operator+ to add two polynomials of degree 2.
Overloaded << and >> to print and read polynomials
To do this, you will need to decide what you want your input and output format to look like
A function eval that computes the value of a polynomial for a given value of x
A function that computes the two solutions of the equation ax2 + bx + c = 0*/

//include math.h header file for determinant
//create floats a,b,c private and use 2 constructors
//have  a istream and ostream friend function
//have a quad operator friend function for adding
//have function: float eval(float val)
//int that just calc a(val*val) + b(val) + c and return it
//have fn: void roots();
//in it: first calc det= b2 - 4ac
//on basis of that have 3 condn:- 1.Imaginary 2.Unique 3.Real Distinct and use sqrt(det) only in 3 rd case.


//friend ostream &operator(ostream &out,quad &q);
//quad operator+(quad q1,quad q2);

#include <iostream>
#include<math.h>
using namespace std;
class quad
{
	float a, b, c;
public:
	quad()
	{
		a = 0;
		b = 0;
		c = 0;
	}
	quad(int l, int m, int n)
	{
		a = l;
		b = m;
		c = n;
	}
	friend ostream& operator<<(ostream& out, quad& q);
	friend istream& operator>>(istream& in, quad& q);
	friend quad operator+(quad q1, quad q2);
	float eval(float val);
	void roots();
};

void quad::roots()
{
	float det = (b * b) - (4.0 * a * c);

	if (det < 0)
		cout << "Imaginary Roots" << endl;

	else if (det == 0)
	{
		cout << "Unique solution " << endl;
		float x = -b / (2.0 * a);
		cout << " x=" << x << endl;
	}

	else
	{
		cout << "Real solutions" << endl;
		float x1 = (-b + sqrt(det)) / (2.0 * a);
		float x2 = (-b - sqrt(det)) / (2.0 * a);
		cout << "x1= " << x1 << " and x2=" << x2 << endl;
	}
}

float quad::eval(float val)
{
	float result;
	result = (a * val * val) + (b * val) + (c);
	return result;
}

quad operator+(quad q1, quad q2)
{
	quad temp;
	temp.a = q1.a + q2.a;
	temp.b = q1.b + q2.b;
	temp.c = q1.c + q2.c;
	return temp;
}

ostream & operator<<(ostream& out, quad& q)
{
	out <<"("<< q.a << "x^2) + (" << q.b << "x) + (" << q.c <<")"<< endl;
	return out;
}

istream & operator>>(istream & in, quad& q)
{
	in >> q.a >> q.b >> q.c;
	return in;
}

int main()
{
	float val;
	quad q1,q2;
	cout << "Enter polynomial 1 in ax2 + bx + c format" << endl;
	cin >> q1;
	cout << q1;

	cout << "Evaluate at a value" << endl;
	cout << "Enter value" << endl;
	cin >> val;
	float result=q1.eval(val);
	cout << "Evaluation is " << result << endl;

	cout << "Roots of equation" << endl;
	q1.roots();

	cout << "Enter polynomial 2 in ax2 + bx + c format" << endl;
	cin >> q2;
	cout << q2;
	
	cout << "Addition" << endl;
	quad q3 = q1 + q2;
	cout << q3;

	return 0;
}
